/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************************!*\
  !*** ./shader-balls/shader_balls.ts ***!
  \**************************************/
class Vector3 {
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}
class Transform {
    constructor(position = new Vector3(), rotation = new Vector3()) {
        this.position = position;
        this.rotation = rotation;
    }
}
class RenderObject {
    constructor(texture_id = null, mesh_id = null, transform = new Transform()) {
        this.texture_id = texture_id;
        this.mesh_id = mesh_id;
        this.transform = transform;
    }
}
class Mesh {
}
;
class FloatMatrix {
    constructor(buffer, m, n) {
        this.m = m;
        this.n = n;
        this.buffer = buffer;
    }
    multiply(matrix_b) {
        let dot_product = new FloatMatrix(new Float64Array(this.m * matrix_b.n), this.m, matrix_b.n);
        for (let a_row = 0; a_row < this.m; a_row++) {
            for (let b_col = 0; b_col < matrix_b.n; b_col++) {
                let product_sum = 0;
                for (let a_col = 0; a_col < this.n; a_col++) {
                    for (let b_row = 0; b_row < matrix_b.m; b_row++) {
                        product_sum += this.buffer[a_row * this.n + a_col] * matrix_b.buffer[b_row * matrix_b.n + b_col];
                    }
                }
                dot_product.buffer[a_row * dot_product.n + b_col] = product_sum;
            }
        }
        return dot_product;
    }
}
;
var render_objects = new Array();
var texture_map = new Map();
var mesh_map = new Map();
function render() {
    requestAnimationFrame(render);
}
function start() {
    render();
}
function create_sphere(radius_meters = 1, segments = 6, rings = 12) {
    let curve_vertices = [];
    for (let i = 0; i < rings; i++) {
        let theta = Math.PI / 2 - (Math.PI / rings * i);
        let x = Math.cos(theta) * radius_meters;
        let y = Math.sin(theta) * radius_meters;
        curve_vertices.push(new Vector3(x, y));
    }
    let rotation_matrix = new FloatMatrix(new Float64Array(), 2, 2);
    let sphere_vertices = [];
    return new RenderObject();
}
let A = new FloatMatrix(new Float64Array([1, 2, 3, 4]), 2, 2);
let B = new FloatMatrix(new Float64Array([5, 6, 7, 8]), 2, 2);
console.log(A.multiply(B));

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTlELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2NyaXB0cy8uL3NoYWRlci1iYWxscy9zaGFkZXJfYmFsbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmVjdG9yMyB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB6OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgejogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLnogPSB6O1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUcmFuc2Zvcm0ge1xyXG4gICAgcG9zaXRpb246IFZlY3RvcjM7XHJcbiAgICByb3RhdGlvbjogVmVjdG9yMztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKCksIHJvdGF0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFJlbmRlck9iamVjdCB7XHJcbiAgICB0ZXh0dXJlX2lkOiBudW1iZXI7XHJcbiAgICBtZXNoX2lkOiBudW1iZXI7XHJcbiAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0dXJlX2lkOiBudW1iZXIgPSBudWxsLCBtZXNoX2lkOiBudW1iZXIgPSBudWxsLCB0cmFuc2Zvcm06IFRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKSkge1xyXG4gICAgICAgIHRoaXMudGV4dHVyZV9pZCA9IHRleHR1cmVfaWQ7XHJcbiAgICAgICAgdGhpcy5tZXNoX2lkID0gbWVzaF9pZDtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgTWVzaCB7XHJcblxyXG59O1xyXG5cclxuY2xhc3MgRmxvYXRNYXRyaXgge1xyXG4gICAgYnVmZmVyOiBGbG9hdDY0QXJyYXk7XHJcbiAgICBtOiBudW1iZXI7XHJcbiAgICBuOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYnVmZmVyOiBGbG9hdDY0QXJyYXksIG06IG51bWJlciwgbjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5tID0gbTtcclxuICAgICAgICB0aGlzLm4gPSBuO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIG11bHRpcGx5KG1hdHJpeF9iOiBGbG9hdE1hdHJpeCk6IEZsb2F0TWF0cml4IHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgZG90X3Byb2R1Y3QgPSBuZXcgRmxvYXRNYXRyaXgobmV3IEZsb2F0NjRBcnJheSh0aGlzLm0gKiBtYXRyaXhfYi5uKSwgdGhpcy5tLCBtYXRyaXhfYi5uKTtcclxuICAgICAgICBmb3IgKGxldCBhX3JvdyA9IDA7IGFfcm93IDwgdGhpcy5tOyBhX3JvdysrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGJfY29sID0gMDsgYl9jb2wgPCBtYXRyaXhfYi5uOyBiX2NvbCsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvZHVjdF9zdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYV9jb2wgPSAwOyBhX2NvbCA8IHRoaXMubjsgYV9jb2wrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGJfcm93ID0gMDsgYl9yb3cgPCBtYXRyaXhfYi5tOyBiX3JvdysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3Rfc3VtICs9IHRoaXMuYnVmZmVyW2Ffcm93ICogdGhpcy5uICsgYV9jb2xdICogbWF0cml4X2IuYnVmZmVyW2Jfcm93ICogbWF0cml4X2IubiArIGJfY29sXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkb3RfcHJvZHVjdC5idWZmZXJbYV9yb3cgKiBkb3RfcHJvZHVjdC5uICsgYl9jb2xdID0gcHJvZHVjdF9zdW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRvdF9wcm9kdWN0IDtcclxuICAgIH1cclxufTtcclxuXHJcbnZhciByZW5kZXJfb2JqZWN0czogQXJyYXk8UmVuZGVyT2JqZWN0PiA9IG5ldyBBcnJheSgpO1xyXG52YXIgdGV4dHVyZV9tYXA6IE1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT4gPSBuZXcgTWFwKCk7XHJcbnZhciBtZXNoX21hcDogTWFwPG51bWJlciwgTWVzaD4gPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG4gICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgcmVuZGVyKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZV9zcGhlcmUocmFkaXVzX21ldGVyczogbnVtYmVyID0gMSwgc2VnbWVudHM6IG51bWJlciA9IDYsIHJpbmdzOiBudW1iZXIgPSAxMikge1xyXG4gICAgbGV0IGN1cnZlX3ZlcnRpY2VzOiBBcnJheTxWZWN0b3IzPiA9IFtdO1xyXG4gICAgXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcmluZ3M7IGkrKykge1xyXG4gICAgICAgIGxldCB0aGV0YSA9IE1hdGguUEkgLyAyIC0gKE1hdGguUEkgLyByaW5ncyAqIGkpO1xyXG4gICAgICAgIGxldCB4ID0gTWF0aC5jb3ModGhldGEpICogcmFkaXVzX21ldGVycztcclxuICAgICAgICBsZXQgeSA9IE1hdGguc2luKHRoZXRhKSAqIHJhZGl1c19tZXRlcnM7XHJcblxyXG4gICAgICAgIGN1cnZlX3ZlcnRpY2VzLnB1c2gobmV3IFZlY3RvcjMoeCwgeSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByb3RhdGlvbl9tYXRyaXg6IEZsb2F0TWF0cml4ID0gbmV3IEZsb2F0TWF0cml4KG5ldyBGbG9hdDY0QXJyYXkoKSwgMiwgMik7XHJcblxyXG4gICAgbGV0IHNwaGVyZV92ZXJ0aWNlczogQXJyYXk8VmVjdG9yMz4gPSBbXTtcclxuXHJcbiAgICBcclxuXHJcbiAgICByZXR1cm4gbmV3IFJlbmRlck9iamVjdCgpO1xyXG4gICAgXHJcbn1cclxuXHJcbmxldCBBID0gbmV3IEZsb2F0TWF0cml4KG5ldyBGbG9hdDY0QXJyYXkoWzEsIDIsIDMsIDRdKSwgMiwgMik7XHJcbmxldCBCID0gbmV3IEZsb2F0TWF0cml4KG5ldyBGbG9hdDY0QXJyYXkoWzUsIDYsIDcsIDhdKSwgMiwgMik7XHJcblxyXG5jb25zb2xlLmxvZyhBLm11bHRpcGx5KEIpKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9